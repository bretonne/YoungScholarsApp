<?xml version="1.0" encoding="utf-8"?>
<r:QContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
	  xmlns:matching="com.aVictorio.youngScholars.views.games.matching.*" 
	  xmlns:listClasses="qnx.ui.listClasses.*" 
	  xmlns:toolBar="com.aVictorio.justLearn.components.toolBar.*"
	  complete="completeHandler(event)" 
	  xmlns:r="http://ns.renaun.com/mxml/2010" 
	  xmlns:gradientBackgroundView="com.aVictorio.justLearn.components.toolBar.gradientBackgroundView.*" 
	  xmlns:core="qnx.ui.core.*" 
	  xmlns:text="qnx.ui.text.*" 
	  xmlns:components="com.aVictorio.youngScholars.views.components.*" 
	>
	<fx:Metadata>
		[Event(name="home", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.aVictorio.youngScholars.managers.IconManager;
			import com.aVictorio.youngScholars.managers.StylingFactory;
			import com.aVictorio.youngScholars.model.ApplicationModel;
			import com.aVictorio.youngScholars.model.GameModel;
			import com.aVictorio.youngScholars.vos.GameDescriptor;
			
			import qnx.ui.buttons.IconButton;
			import qnx.ui.core.ContainerFlow;
			import qnx.ui.core.Containment;
			import qnx.ui.core.SizeMode;
			import qnx.ui.core.SizeUnit;
			import qnx.ui.data.DataProvider;
			import qnx.ui.events.ListEvent;
			import qnx.ui.listClasses.ListSelectionMode;
			import qnx.ui.text.Label;
			
			protected var nextView:MatchingGameBoardView_phone;

			protected var btnBack:IconButton;
			protected var btnHome:IconButton;
			protected var btnNext:IconButton;
			protected var btnReplay:IconButton;
			
			[Bindable]
			public var gameSetIndex:int=-1;
			
			[Bindable]
			protected var gameModel:GameModel = GameModel.instance;
			
			protected var buttonSize:int = ApplicationModel.NavigationButtonSize;
			
			public var isBufferBoard:Boolean = false;
			
			protected function completeHandler(event:Event):void
			{
				GameModel.instance.currentGameSetIndex=gameSetIndex;

				addNavigationButtons();
				
				btnBack.addEventListener(MouseEvent.CLICK, onBack, false, 0, true);
				btnHome.addEventListener(MouseEvent.CLICK, onHome, false, 0, true);
				btnNext.addEventListener(MouseEvent.CLICK, onNext, false, 0, true);
				btnReplay.addEventListener(MouseEvent.CLICK, onReplay, false, 0, true);
			}
				
				
			private function addNavigationButtons():void
			{
				btnBack = new IconButton();
				btnHome = new IconButton();
				btnNext = new IconButton();
				btnReplay = new IconButton();
				
				btnBack.setIcon(new IconManager.BackIcon());
				btnBack.setSize(buttonSize, buttonSize);
				
				btnHome.setIcon(new IconManager.HomeIcon());
				btnHome.setSize(buttonSize, buttonSize);

				btnNext.setIcon(new IconManager.NextIcon());
				btnNext.setSize(buttonSize, buttonSize);
				
				btnReplay.setIcon(new IconManager.RefreshIcon());
				btnReplay.setSize(buttonSize, buttonSize);
				
				addChild(btnBack);
				addChild(btnHome);
				addChild(btnNext);
				addChild(btnReplay);
			}
			
			override protected function draw():void
			{
				super.draw();

				if (titleList)
				{
				//	titleLabel.setSize(this.width - 2*buttonSize, ApplicationModel.GameTitleHeight);
					titleList.setPosition((this.width-2*buttonSize-titleList.width)/2+buttonSize, 10); //100 for navigation button
				}
				
				if (btnBack)
					btnBack.setPosition(0, 0);
				
				if (btnHome)
					btnHome.setPosition(0, this.height -buttonSize);
				
				if (btnNext)
					btnNext.setPosition(this.width-buttonSize, this.height-buttonSize);
				
				if (btnReplay)
					btnReplay.setPosition(this.width-buttonSize, 0);
				
				if (cardBoard)
				{
					cardBoard.setSize(ApplicationModel.boardWidth, ApplicationModel.boardHeight);
					var boardX:int = (this.width - ApplicationModel.boardWidth)/2;
					var boardY:int = (this.height - ApplicationModel.boardHeight)/2+ApplicationModel.GameTitleHeight; //title height
					
					cardBoard.setPosition(boardX, boardY);
					trace(cardBoard.width + "," + cardBoard.height);
				}

			}
			
			protected function onBack(event:Event=null):void
			{
//				navigator.popView();				
			}
			
			protected function onHome(event:Event=null):void
			{
				dispatchEvent(new Event("home"));
//				navigator.popToFirstView();
			}
			
			public function onReplay(event:Event=null):void
			{
				//cardBoard.replayGame();
				loadGameToBufferBoard(cardBoard.currentGame);
			}
			
			public function playGame(game:GameDescriptor):void
			{
				cardBoard.playGame(game);
			}
			
			
			public function onNext(event:Event=null):void
			{
				var nextGame:GameDescriptor = GameModel.instance.getNextGameType(cardBoard.currentGame.gameType);
				loadGameToBufferBoard(nextGame);
			}
			
			protected function loadGameToBufferBoard(game:GameDescriptor):void
			{

				if (isBufferBoard == false)
				{
					if (nextView==null)
					{
						nextView = new MatchingGameBoardView_phone();
						nextView.nextView = this;
					}
					else 
					{
						trace("nextView !null && bufferBoard=false");
					}
					nextView.gameSetIndex = gameSetIndex;
					nextView.isBufferBoard = true;
					nextView.playGame(game);
					
//					navigator.pushView(nextView);
				}
				else
				{
					if (nextView == null)
					{
						trace("buffer view's next view is null.");
					}
					else
					{
						nextView.nextView = this;
					}
					nextView.gameSetIndex = gameSetIndex;
					nextView.isBufferBoard = false;
					nextView.playGame(game);
				
//					navigator.pushView(nextView);
				}
			}
			
			protected function selectTitleHandler(event:Event):void
			{
				var currentLocale:String = titleList.selectedItem.id as String;
				
				cardBoard.onLocaleChanged();
				invalidate();
			}
			
		]]>
	</fx:Script>
	
	<components:GradientBackground 
		id="background" color="0x345d53"
		containment="{Containment.BACKGROUND}"/>
	
	<listClasses:DropDown id="titleList" size="{ApplicationModel.TitleBarHeight}" sizeMode="{SizeMode.FLOW}"
						  sizeUnit="{SizeUnit.PIXELS}"
						  rowCount="{gameModel.currentGameSet.length}"
						  rowHeight="{ApplicationModel.TitleBarHeight}" 
						  dataProvider="{new DataProvider(gameModel.currentGameSet)}"
						  select="selectTitleHandler(event)"
						  />
		
	<matching:MatchingGameBoardContainer 
		id="cardBoard"
		gameSetIndex="{this.gameSetIndex}"
		containment="{Containment.CONTAINED}" />
	
</r:QContainer>
